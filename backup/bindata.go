// Code generated by go-bindata.
// sources:
// sql\settings.sql
// sql\tables.sql
// DO NOT EDIT!

package backup

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlSettingsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x08\x72\x74\xf7\x75\x54\xc8\xca\x2f\x2d\xca\x4b\xcc\x89\xcf\xcd\x4f\x49\x55\xb0\x55\xf0\x75\xf5\xf5\x0f\x8a\xb4\xe6\xe5\x82\x4a\x17\x57\xe6\x25\x67\x14\xe5\xe7\xe5\x97\x16\x03\x65\xfd\xdd\xdc\xac\x01\x01\x00\x00\xff\xff\x74\x76\x23\xe7\x38\x00\x00\x00")

func sqlSettingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlSettingsSql,
		"sql/settings.sql",
	)
}

func sqlSettingsSql() (*asset, error) {
	bytes, err := sqlSettingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/settings.sql", size: 56, mode: os.FileMode(438), modTime: time.Unix(1432992547, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlTablesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x91\xb1\x4e\xc3\x30\x10\x86\xe7\x46\xca\x3b\xdc\x96\x46\x6a\x9f\x80\x29\x29\x97\x62\x11\x6c\xe4\x5c\xd5\x76\xb3\x45\x53\x1a\x81\x93\xa8\x4e\x16\x9e\x9e\xc4\x95\x80\x82\x0b\x42\x0c\xac\xf7\xff\xbe\x4f\xfe\x6e\x21\x31\x21\x04\x4a\xd2\x1c\x81\x65\xc0\x05\x01\x6e\x58\x41\x05\xa8\x87\x43\x5f\x3f\x59\x35\x0d\x83\x89\xb2\xbd\x51\x93\x34\x17\xa9\x6b\xf0\x55\x9e\xcf\x86\xf1\xbd\x64\x77\x89\xdc\xc2\x2d\x6e\xa7\x43\x23\x0e\x83\x18\xd6\x8c\x6e\xc4\x8a\x40\x8a\x35\xbb\xbe\x0a\x83\x30\xf8\x8e\xb1\xaf\x9e\x4b\x56\xef\x9b\x13\xa5\xd6\xa6\x54\x40\xb8\xa1\x33\x8c\x32\xcd\x6e\x98\x33\x4e\xb8\x44\x79\x16\xcd\xe7\xaa\xb7\xe5\xd1\xf3\x68\x48\x1e\x8f\x4d\xdf\xfa\xf6\x75\x95\x29\x6d\xa7\x4d\xeb\x5f\xaa\x6c\xf5\x72\x81\x17\x39\x29\x11\x7c\x51\x11\xed\x74\xa7\x3d\xf3\x8f\x8a\xc6\xef\xcd\xe0\x0d\x1e\x8f\x79\x26\x24\xb2\x25\x77\xb9\xdb\x1d\x83\xc4\x0c\x25\xf2\x05\x16\x70\x3a\x81\x73\xfb\xb9\x3c\xf2\x2e\x75\x7f\x7f\x07\x5b\xeb\xd6\x1e\x9a\xee\xfd\x16\x3f\x38\xfa\x93\x88\x7f\x52\xf0\x1a\x00\x00\xff\xff\xbb\xff\x60\x07\xed\x02\x00\x00")

func sqlTablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlTablesSql,
		"sql/tables.sql",
	)
}

func sqlTablesSql() (*asset, error) {
	bytes, err := sqlTablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/tables.sql", size: 749, mode: os.FileMode(438), modTime: time.Unix(1438436212, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/settings.sql": sqlSettingsSql,
	"sql/tables.sql": sqlTablesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"settings.sql": &bintree{sqlSettingsSql, map[string]*bintree{
		}},
		"tables.sql": &bintree{sqlTablesSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

