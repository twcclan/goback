// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Archives", testArchives)
	t.Run("Commits", testCommits)
	t.Run("Files", testFiles)
	t.Run("IndexRecords", testIndexRecords)
	t.Run("Sets", testSets)
	t.Run("Trees", testTrees)
}

func TestDelete(t *testing.T) {
	t.Run("Archives", testArchivesDelete)
	t.Run("Commits", testCommitsDelete)
	t.Run("Files", testFilesDelete)
	t.Run("IndexRecords", testIndexRecordsDelete)
	t.Run("Sets", testSetsDelete)
	t.Run("Trees", testTreesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Archives", testArchivesQueryDeleteAll)
	t.Run("Commits", testCommitsQueryDeleteAll)
	t.Run("Files", testFilesQueryDeleteAll)
	t.Run("IndexRecords", testIndexRecordsQueryDeleteAll)
	t.Run("Sets", testSetsQueryDeleteAll)
	t.Run("Trees", testTreesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Archives", testArchivesSliceDeleteAll)
	t.Run("Commits", testCommitsSliceDeleteAll)
	t.Run("Files", testFilesSliceDeleteAll)
	t.Run("IndexRecords", testIndexRecordsSliceDeleteAll)
	t.Run("Sets", testSetsSliceDeleteAll)
	t.Run("Trees", testTreesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Archives", testArchivesExists)
	t.Run("Commits", testCommitsExists)
	t.Run("Files", testFilesExists)
	t.Run("IndexRecords", testIndexRecordsExists)
	t.Run("Sets", testSetsExists)
	t.Run("Trees", testTreesExists)
}

func TestFind(t *testing.T) {
	t.Run("Archives", testArchivesFind)
	t.Run("Commits", testCommitsFind)
	t.Run("Files", testFilesFind)
	t.Run("IndexRecords", testIndexRecordsFind)
	t.Run("Sets", testSetsFind)
	t.Run("Trees", testTreesFind)
}

func TestBind(t *testing.T) {
	t.Run("Archives", testArchivesBind)
	t.Run("Commits", testCommitsBind)
	t.Run("Files", testFilesBind)
	t.Run("IndexRecords", testIndexRecordsBind)
	t.Run("Sets", testSetsBind)
	t.Run("Trees", testTreesBind)
}

func TestOne(t *testing.T) {
	t.Run("Archives", testArchivesOne)
	t.Run("Commits", testCommitsOne)
	t.Run("Files", testFilesOne)
	t.Run("IndexRecords", testIndexRecordsOne)
	t.Run("Sets", testSetsOne)
	t.Run("Trees", testTreesOne)
}

func TestAll(t *testing.T) {
	t.Run("Archives", testArchivesAll)
	t.Run("Commits", testCommitsAll)
	t.Run("Files", testFilesAll)
	t.Run("IndexRecords", testIndexRecordsAll)
	t.Run("Sets", testSetsAll)
	t.Run("Trees", testTreesAll)
}

func TestCount(t *testing.T) {
	t.Run("Archives", testArchivesCount)
	t.Run("Commits", testCommitsCount)
	t.Run("Files", testFilesCount)
	t.Run("IndexRecords", testIndexRecordsCount)
	t.Run("Sets", testSetsCount)
	t.Run("Trees", testTreesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Archives", testArchivesHooks)
	t.Run("Commits", testCommitsHooks)
	t.Run("Files", testFilesHooks)
	t.Run("IndexRecords", testIndexRecordsHooks)
	t.Run("Sets", testSetsHooks)
	t.Run("Trees", testTreesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Archives", testArchivesInsert)
	t.Run("Archives", testArchivesInsertWhitelist)
	t.Run("Commits", testCommitsInsert)
	t.Run("Commits", testCommitsInsertWhitelist)
	t.Run("Files", testFilesInsert)
	t.Run("Files", testFilesInsertWhitelist)
	t.Run("IndexRecords", testIndexRecordsInsert)
	t.Run("IndexRecords", testIndexRecordsInsertWhitelist)
	t.Run("Sets", testSetsInsert)
	t.Run("Sets", testSetsInsertWhitelist)
	t.Run("Trees", testTreesInsert)
	t.Run("Trees", testTreesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CommitToSetUsingSet", testCommitToOneSetUsingSet)
	t.Run("FileToSetUsingSet", testFileToOneSetUsingSet)
	t.Run("IndexRecordToArchiveUsingArchive", testIndexRecordToOneArchiveUsingArchive)
	t.Run("TreeToSetUsingSet", testTreeToOneSetUsingSet)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ArchiveToIndexRecords", testArchiveToManyIndexRecords)
	t.Run("SetToCommits", testSetToManyCommits)
	t.Run("SetToFiles", testSetToManyFiles)
	t.Run("SetToTrees", testSetToManyTrees)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CommitToSetUsingCommits", testCommitToOneSetOpSetUsingSet)
	t.Run("FileToSetUsingFiles", testFileToOneSetOpSetUsingSet)
	t.Run("IndexRecordToArchiveUsingIndexRecords", testIndexRecordToOneSetOpArchiveUsingArchive)
	t.Run("TreeToSetUsingTrees", testTreeToOneSetOpSetUsingSet)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ArchiveToIndexRecords", testArchiveToManyAddOpIndexRecords)
	t.Run("SetToCommits", testSetToManyAddOpCommits)
	t.Run("SetToFiles", testSetToManyAddOpFiles)
	t.Run("SetToTrees", testSetToManyAddOpTrees)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Archives", testArchivesReload)
	t.Run("Commits", testCommitsReload)
	t.Run("Files", testFilesReload)
	t.Run("IndexRecords", testIndexRecordsReload)
	t.Run("Sets", testSetsReload)
	t.Run("Trees", testTreesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Archives", testArchivesReloadAll)
	t.Run("Commits", testCommitsReloadAll)
	t.Run("Files", testFilesReloadAll)
	t.Run("IndexRecords", testIndexRecordsReloadAll)
	t.Run("Sets", testSetsReloadAll)
	t.Run("Trees", testTreesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Archives", testArchivesSelect)
	t.Run("Commits", testCommitsSelect)
	t.Run("Files", testFilesSelect)
	t.Run("IndexRecords", testIndexRecordsSelect)
	t.Run("Sets", testSetsSelect)
	t.Run("Trees", testTreesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Archives", testArchivesUpdate)
	t.Run("Commits", testCommitsUpdate)
	t.Run("Files", testFilesUpdate)
	t.Run("IndexRecords", testIndexRecordsUpdate)
	t.Run("Sets", testSetsUpdate)
	t.Run("Trees", testTreesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Archives", testArchivesSliceUpdateAll)
	t.Run("Commits", testCommitsSliceUpdateAll)
	t.Run("Files", testFilesSliceUpdateAll)
	t.Run("IndexRecords", testIndexRecordsSliceUpdateAll)
	t.Run("Sets", testSetsSliceUpdateAll)
	t.Run("Trees", testTreesSliceUpdateAll)
}
