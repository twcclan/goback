// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IndexRecord is an object representing the database table.
type IndexRecord struct {
	Ref       []byte `boil:"ref" json:"ref" toml:"ref" yaml:"ref"`
	Offset    int    `boil:"offset" json:"offset" toml:"offset" yaml:"offset"`
	Length    int    `boil:"length" json:"length" toml:"length" yaml:"length"`
	Type      int    `boil:"type" json:"type" toml:"type" yaml:"type"`
	ArchiveID int    `boil:"archive_id" json:"archive_id" toml:"archive_id" yaml:"archive_id"`

	R *indexRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L indexRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IndexRecordColumns = struct {
	Ref       string
	Offset    string
	Length    string
	Type      string
	ArchiveID string
}{
	Ref:       "ref",
	Offset:    "offset",
	Length:    "length",
	Type:      "type",
	ArchiveID: "archive_id",
}

var IndexRecordTableColumns = struct {
	Ref       string
	Offset    string
	Length    string
	Type      string
	ArchiveID string
}{
	Ref:       "index_records.ref",
	Offset:    "index_records.offset",
	Length:    "index_records.length",
	Type:      "index_records.type",
	ArchiveID: "index_records.archive_id",
}

// Generated where

var IndexRecordWhere = struct {
	Ref       whereHelper__byte
	Offset    whereHelperint
	Length    whereHelperint
	Type      whereHelperint
	ArchiveID whereHelperint
}{
	Ref:       whereHelper__byte{field: "\"index_records\".\"ref\""},
	Offset:    whereHelperint{field: "\"index_records\".\"offset\""},
	Length:    whereHelperint{field: "\"index_records\".\"length\""},
	Type:      whereHelperint{field: "\"index_records\".\"type\""},
	ArchiveID: whereHelperint{field: "\"index_records\".\"archive_id\""},
}

// IndexRecordRels is where relationship names are stored.
var IndexRecordRels = struct {
	Archive string
}{
	Archive: "Archive",
}

// indexRecordR is where relationships are stored.
type indexRecordR struct {
	Archive *Archive `boil:"Archive" json:"Archive" toml:"Archive" yaml:"Archive"`
}

// NewStruct creates a new relationship struct
func (*indexRecordR) NewStruct() *indexRecordR {
	return &indexRecordR{}
}

// indexRecordL is where Load methods for each relationship are stored.
type indexRecordL struct{}

var (
	indexRecordAllColumns            = []string{"ref", "offset", "length", "type", "archive_id"}
	indexRecordColumnsWithoutDefault = []string{"ref", "offset", "length", "type", "archive_id"}
	indexRecordColumnsWithDefault    = []string{}
	indexRecordPrimaryKeyColumns     = []string{"ref", "archive_id"}
)

type (
	// IndexRecordSlice is an alias for a slice of pointers to IndexRecord.
	// This should almost always be used instead of []IndexRecord.
	IndexRecordSlice []*IndexRecord
	// IndexRecordHook is the signature for custom IndexRecord hook methods
	IndexRecordHook func(context.Context, boil.ContextExecutor, *IndexRecord) error

	indexRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	indexRecordType                 = reflect.TypeOf(&IndexRecord{})
	indexRecordMapping              = queries.MakeStructMapping(indexRecordType)
	indexRecordPrimaryKeyMapping, _ = queries.BindMapping(indexRecordType, indexRecordMapping, indexRecordPrimaryKeyColumns)
	indexRecordInsertCacheMut       sync.RWMutex
	indexRecordInsertCache          = make(map[string]insertCache)
	indexRecordUpdateCacheMut       sync.RWMutex
	indexRecordUpdateCache          = make(map[string]updateCache)
	indexRecordUpsertCacheMut       sync.RWMutex
	indexRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var indexRecordBeforeInsertHooks []IndexRecordHook
var indexRecordBeforeUpdateHooks []IndexRecordHook
var indexRecordBeforeDeleteHooks []IndexRecordHook
var indexRecordBeforeUpsertHooks []IndexRecordHook

var indexRecordAfterInsertHooks []IndexRecordHook
var indexRecordAfterSelectHooks []IndexRecordHook
var indexRecordAfterUpdateHooks []IndexRecordHook
var indexRecordAfterDeleteHooks []IndexRecordHook
var indexRecordAfterUpsertHooks []IndexRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IndexRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IndexRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IndexRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IndexRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IndexRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IndexRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IndexRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IndexRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IndexRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range indexRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIndexRecordHook registers your hook function for all future operations.
func AddIndexRecordHook(hookPoint boil.HookPoint, indexRecordHook IndexRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		indexRecordBeforeInsertHooks = append(indexRecordBeforeInsertHooks, indexRecordHook)
	case boil.BeforeUpdateHook:
		indexRecordBeforeUpdateHooks = append(indexRecordBeforeUpdateHooks, indexRecordHook)
	case boil.BeforeDeleteHook:
		indexRecordBeforeDeleteHooks = append(indexRecordBeforeDeleteHooks, indexRecordHook)
	case boil.BeforeUpsertHook:
		indexRecordBeforeUpsertHooks = append(indexRecordBeforeUpsertHooks, indexRecordHook)
	case boil.AfterInsertHook:
		indexRecordAfterInsertHooks = append(indexRecordAfterInsertHooks, indexRecordHook)
	case boil.AfterSelectHook:
		indexRecordAfterSelectHooks = append(indexRecordAfterSelectHooks, indexRecordHook)
	case boil.AfterUpdateHook:
		indexRecordAfterUpdateHooks = append(indexRecordAfterUpdateHooks, indexRecordHook)
	case boil.AfterDeleteHook:
		indexRecordAfterDeleteHooks = append(indexRecordAfterDeleteHooks, indexRecordHook)
	case boil.AfterUpsertHook:
		indexRecordAfterUpsertHooks = append(indexRecordAfterUpsertHooks, indexRecordHook)
	}
}

// One returns a single indexRecord record from the query.
func (q indexRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IndexRecord, error) {
	o := &IndexRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for index_records")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IndexRecord records from the query.
func (q indexRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (IndexRecordSlice, error) {
	var o []*IndexRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IndexRecord slice")
	}

	if len(indexRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IndexRecord records in the query.
func (q indexRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count index_records rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q indexRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if index_records exists")
	}

	return count > 0, nil
}

// Archive pointed to by the foreign key.
func (o *IndexRecord) Archive(mods ...qm.QueryMod) archiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArchiveID),
	}

	queryMods = append(queryMods, mods...)

	query := Archives(queryMods...)
	queries.SetFrom(query.Query, "\"archives\"")

	return query
}

// LoadArchive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (indexRecordL) LoadArchive(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIndexRecord interface{}, mods queries.Applicator) error {
	var slice []*IndexRecord
	var object *IndexRecord

	if singular {
		object = maybeIndexRecord.(*IndexRecord)
	} else {
		slice = *maybeIndexRecord.(*[]*IndexRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &indexRecordR{}
		}
		args = append(args, object.ArchiveID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &indexRecordR{}
			}

			for _, a := range args {
				if a == obj.ArchiveID {
					continue Outer
				}
			}

			args = append(args, obj.ArchiveID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`archives`),
		qm.WhereIn(`archives.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Archive")
	}

	var resultSlice []*Archive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Archive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for archives")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for archives")
	}

	if len(indexRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Archive = foreign
		if foreign.R == nil {
			foreign.R = &archiveR{}
		}
		foreign.R.IndexRecords = append(foreign.R.IndexRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArchiveID == foreign.ID {
				local.R.Archive = foreign
				if foreign.R == nil {
					foreign.R = &archiveR{}
				}
				foreign.R.IndexRecords = append(foreign.R.IndexRecords, local)
				break
			}
		}
	}

	return nil
}

// SetArchive of the indexRecord to the related item.
// Sets o.R.Archive to related.
// Adds o to related.R.IndexRecords.
func (o *IndexRecord) SetArchive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Archive) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"index_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"archive_id"}),
		strmangle.WhereClause("\"", "\"", 2, indexRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Ref, o.ArchiveID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArchiveID = related.ID
	if o.R == nil {
		o.R = &indexRecordR{
			Archive: related,
		}
	} else {
		o.R.Archive = related
	}

	if related.R == nil {
		related.R = &archiveR{
			IndexRecords: IndexRecordSlice{o},
		}
	} else {
		related.R.IndexRecords = append(related.R.IndexRecords, o)
	}

	return nil
}

// IndexRecords retrieves all the records using an executor.
func IndexRecords(mods ...qm.QueryMod) indexRecordQuery {
	mods = append(mods, qm.From("\"index_records\""))
	return indexRecordQuery{NewQuery(mods...)}
}

// FindIndexRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIndexRecord(ctx context.Context, exec boil.ContextExecutor, ref []byte, archiveID int, selectCols ...string) (*IndexRecord, error) {
	indexRecordObj := &IndexRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"index_records\" where \"ref\"=$1 AND \"archive_id\"=$2", sel,
	)

	q := queries.Raw(query, ref, archiveID)

	err := q.Bind(ctx, exec, indexRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from index_records")
	}

	if err = indexRecordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return indexRecordObj, err
	}

	return indexRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IndexRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no index_records provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(indexRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	indexRecordInsertCacheMut.RLock()
	cache, cached := indexRecordInsertCache[key]
	indexRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			indexRecordAllColumns,
			indexRecordColumnsWithDefault,
			indexRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(indexRecordType, indexRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(indexRecordType, indexRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"index_records\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"index_records\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into index_records")
	}

	if !cached {
		indexRecordInsertCacheMut.Lock()
		indexRecordInsertCache[key] = cache
		indexRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IndexRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IndexRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	indexRecordUpdateCacheMut.RLock()
	cache, cached := indexRecordUpdateCache[key]
	indexRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			indexRecordAllColumns,
			indexRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update index_records, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"index_records\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, indexRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(indexRecordType, indexRecordMapping, append(wl, indexRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update index_records row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for index_records")
	}

	if !cached {
		indexRecordUpdateCacheMut.Lock()
		indexRecordUpdateCache[key] = cache
		indexRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q indexRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for index_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for index_records")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IndexRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indexRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"index_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, indexRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in indexRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all indexRecord")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IndexRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no index_records provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(indexRecordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	indexRecordUpsertCacheMut.RLock()
	cache, cached := indexRecordUpsertCache[key]
	indexRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			indexRecordAllColumns,
			indexRecordColumnsWithDefault,
			indexRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			indexRecordAllColumns,
			indexRecordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert index_records, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(indexRecordPrimaryKeyColumns))
			copy(conflict, indexRecordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"index_records\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(indexRecordType, indexRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(indexRecordType, indexRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert index_records")
	}

	if !cached {
		indexRecordUpsertCacheMut.Lock()
		indexRecordUpsertCache[key] = cache
		indexRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IndexRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IndexRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IndexRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), indexRecordPrimaryKeyMapping)
	sql := "DELETE FROM \"index_records\" WHERE \"ref\"=$1 AND \"archive_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from index_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for index_records")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q indexRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no indexRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from index_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for index_records")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IndexRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(indexRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indexRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"index_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, indexRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from indexRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for index_records")
	}

	if len(indexRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IndexRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIndexRecord(ctx, exec, o.Ref, o.ArchiveID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IndexRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IndexRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indexRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"index_records\".* FROM \"index_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, indexRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IndexRecordSlice")
	}

	*o = slice

	return nil
}

// IndexRecordExists checks if the IndexRecord row exists.
func IndexRecordExists(ctx context.Context, exec boil.ContextExecutor, ref []byte, archiveID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"index_records\" where \"ref\"=$1 AND \"archive_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ref, archiveID)
	}
	row := exec.QueryRowContext(ctx, sql, ref, archiveID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if index_records exists")
	}

	return exists, nil
}
