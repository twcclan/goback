// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testArchives(t *testing.T) {
	t.Parallel()

	query := Archives()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testArchivesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArchivesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Archives().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArchivesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArchiveSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArchivesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ArchiveExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Archive exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArchiveExists to return true, but got false.")
	}
}

func testArchivesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	archiveFound, err := FindArchive(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if archiveFound == nil {
		t.Error("want a record, got nil")
	}
}

func testArchivesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Archives().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testArchivesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Archives().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArchivesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	archiveOne := &Archive{}
	archiveTwo := &Archive{}
	if err = randomize.Struct(seed, archiveOne, archiveDBTypes, false, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}
	if err = randomize.Struct(seed, archiveTwo, archiveDBTypes, false, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = archiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = archiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Archives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArchivesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	archiveOne := &Archive{}
	archiveTwo := &Archive{}
	if err = randomize.Struct(seed, archiveOne, archiveDBTypes, false, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}
	if err = randomize.Struct(seed, archiveTwo, archiveDBTypes, false, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = archiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = archiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func archiveBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func archiveAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Archive) error {
	*o = Archive{}
	return nil
}

func testArchivesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Archive{}
	o := &Archive{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, archiveDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Archive object: %s", err)
	}

	AddArchiveHook(boil.BeforeInsertHook, archiveBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	archiveBeforeInsertHooks = []ArchiveHook{}

	AddArchiveHook(boil.AfterInsertHook, archiveAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	archiveAfterInsertHooks = []ArchiveHook{}

	AddArchiveHook(boil.AfterSelectHook, archiveAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	archiveAfterSelectHooks = []ArchiveHook{}

	AddArchiveHook(boil.BeforeUpdateHook, archiveBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	archiveBeforeUpdateHooks = []ArchiveHook{}

	AddArchiveHook(boil.AfterUpdateHook, archiveAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	archiveAfterUpdateHooks = []ArchiveHook{}

	AddArchiveHook(boil.BeforeDeleteHook, archiveBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	archiveBeforeDeleteHooks = []ArchiveHook{}

	AddArchiveHook(boil.AfterDeleteHook, archiveAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	archiveAfterDeleteHooks = []ArchiveHook{}

	AddArchiveHook(boil.BeforeUpsertHook, archiveBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	archiveBeforeUpsertHooks = []ArchiveHook{}

	AddArchiveHook(boil.AfterUpsertHook, archiveAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	archiveAfterUpsertHooks = []ArchiveHook{}
}

func testArchivesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArchivesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(archiveColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArchiveToManyIndexRecords(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Archive
	var b, c IndexRecord

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, indexRecordDBTypes, false, indexRecordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, indexRecordDBTypes, false, indexRecordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ArchiveID = a.ID
	c.ArchiveID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IndexRecords().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ArchiveID == b.ArchiveID {
			bFound = true
		}
		if v.ArchiveID == c.ArchiveID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ArchiveSlice{&a}
	if err = a.L.LoadIndexRecords(ctx, tx, false, (*[]*Archive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IndexRecords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IndexRecords = nil
	if err = a.L.LoadIndexRecords(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IndexRecords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testArchiveToManyAddOpIndexRecords(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Archive
	var b, c, d, e IndexRecord

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, archiveDBTypes, false, strmangle.SetComplement(archivePrimaryKeyColumns, archiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IndexRecord{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, indexRecordDBTypes, false, strmangle.SetComplement(indexRecordPrimaryKeyColumns, indexRecordColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IndexRecord{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIndexRecords(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ArchiveID {
			t.Error("foreign key was wrong value", a.ID, first.ArchiveID)
		}
		if a.ID != second.ArchiveID {
			t.Error("foreign key was wrong value", a.ID, second.ArchiveID)
		}

		if first.R.Archive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Archive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IndexRecords[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IndexRecords[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IndexRecords().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testArchivesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArchivesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArchiveSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArchivesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Archives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	archiveDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`}
	_              = bytes.MinRead
)

func testArchivesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(archivePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(archiveAllColumns) == len(archivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, archiveDBTypes, true, archivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testArchivesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(archiveAllColumns) == len(archivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Archive{}
	if err = randomize.Struct(seed, o, archiveDBTypes, true, archiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, archiveDBTypes, true, archivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(archiveAllColumns, archivePrimaryKeyColumns) {
		fields = archiveAllColumns
	} else {
		fields = strmangle.SetComplement(
			archiveAllColumns,
			archivePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ArchiveSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testArchivesUpsert(t *testing.T) {
	t.Parallel()

	if len(archiveAllColumns) == len(archivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Archive{}
	if err = randomize.Struct(seed, &o, archiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Archive: %s", err)
	}

	count, err := Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, archiveDBTypes, false, archivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Archive struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Archive: %s", err)
	}

	count, err = Archives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
