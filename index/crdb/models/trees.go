// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tree is an object representing the database table.
type Tree struct {
	Ref   []byte `boil:"ref" json:"ref" toml:"ref" yaml:"ref"`
	Path  string `boil:"path" json:"path" toml:"path" yaml:"path"`
	SetID int64  `boil:"set_id" json:"set_id" toml:"set_id" yaml:"set_id"`

	R *treeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L treeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TreeColumns = struct {
	Ref   string
	Path  string
	SetID string
}{
	Ref:   "ref",
	Path:  "path",
	SetID: "set_id",
}

var TreeTableColumns = struct {
	Ref   string
	Path  string
	SetID string
}{
	Ref:   "trees.ref",
	Path:  "trees.path",
	SetID: "trees.set_id",
}

// Generated where

var TreeWhere = struct {
	Ref   whereHelper__byte
	Path  whereHelperstring
	SetID whereHelperint64
}{
	Ref:   whereHelper__byte{field: "\"trees\".\"ref\""},
	Path:  whereHelperstring{field: "\"trees\".\"path\""},
	SetID: whereHelperint64{field: "\"trees\".\"set_id\""},
}

// TreeRels is where relationship names are stored.
var TreeRels = struct {
	Set string
}{
	Set: "Set",
}

// treeR is where relationships are stored.
type treeR struct {
	Set *Set `boil:"Set" json:"Set" toml:"Set" yaml:"Set"`
}

// NewStruct creates a new relationship struct
func (*treeR) NewStruct() *treeR {
	return &treeR{}
}

// treeL is where Load methods for each relationship are stored.
type treeL struct{}

var (
	treeAllColumns            = []string{"ref", "path", "set_id"}
	treeColumnsWithoutDefault = []string{"ref", "path", "set_id"}
	treeColumnsWithDefault    = []string{}
	treePrimaryKeyColumns     = []string{"ref", "path", "set_id"}
)

type (
	// TreeSlice is an alias for a slice of pointers to Tree.
	// This should almost always be used instead of []Tree.
	TreeSlice []*Tree
	// TreeHook is the signature for custom Tree hook methods
	TreeHook func(context.Context, boil.ContextExecutor, *Tree) error

	treeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	treeType                 = reflect.TypeOf(&Tree{})
	treeMapping              = queries.MakeStructMapping(treeType)
	treePrimaryKeyMapping, _ = queries.BindMapping(treeType, treeMapping, treePrimaryKeyColumns)
	treeInsertCacheMut       sync.RWMutex
	treeInsertCache          = make(map[string]insertCache)
	treeUpdateCacheMut       sync.RWMutex
	treeUpdateCache          = make(map[string]updateCache)
	treeUpsertCacheMut       sync.RWMutex
	treeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var treeBeforeInsertHooks []TreeHook
var treeBeforeUpdateHooks []TreeHook
var treeBeforeDeleteHooks []TreeHook
var treeBeforeUpsertHooks []TreeHook

var treeAfterInsertHooks []TreeHook
var treeAfterSelectHooks []TreeHook
var treeAfterUpdateHooks []TreeHook
var treeAfterDeleteHooks []TreeHook
var treeAfterUpsertHooks []TreeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tree) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tree) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tree) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tree) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tree) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tree) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tree) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tree) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tree) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range treeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTreeHook registers your hook function for all future operations.
func AddTreeHook(hookPoint boil.HookPoint, treeHook TreeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		treeBeforeInsertHooks = append(treeBeforeInsertHooks, treeHook)
	case boil.BeforeUpdateHook:
		treeBeforeUpdateHooks = append(treeBeforeUpdateHooks, treeHook)
	case boil.BeforeDeleteHook:
		treeBeforeDeleteHooks = append(treeBeforeDeleteHooks, treeHook)
	case boil.BeforeUpsertHook:
		treeBeforeUpsertHooks = append(treeBeforeUpsertHooks, treeHook)
	case boil.AfterInsertHook:
		treeAfterInsertHooks = append(treeAfterInsertHooks, treeHook)
	case boil.AfterSelectHook:
		treeAfterSelectHooks = append(treeAfterSelectHooks, treeHook)
	case boil.AfterUpdateHook:
		treeAfterUpdateHooks = append(treeAfterUpdateHooks, treeHook)
	case boil.AfterDeleteHook:
		treeAfterDeleteHooks = append(treeAfterDeleteHooks, treeHook)
	case boil.AfterUpsertHook:
		treeAfterUpsertHooks = append(treeAfterUpsertHooks, treeHook)
	}
}

// One returns a single tree record from the query.
func (q treeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tree, error) {
	o := &Tree{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trees")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tree records from the query.
func (q treeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TreeSlice, error) {
	var o []*Tree

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tree slice")
	}

	if len(treeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tree records in the query.
func (q treeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trees rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q treeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trees exists")
	}

	return count > 0, nil
}

// Set pointed to by the foreign key.
func (o *Tree) Set(mods ...qm.QueryMod) setQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SetID),
	}

	queryMods = append(queryMods, mods...)

	query := Sets(queryMods...)
	queries.SetFrom(query.Query, "\"sets\"")

	return query
}

// LoadSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (treeL) LoadSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTree interface{}, mods queries.Applicator) error {
	var slice []*Tree
	var object *Tree

	if singular {
		object = maybeTree.(*Tree)
	} else {
		slice = *maybeTree.(*[]*Tree)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &treeR{}
		}
		args = append(args, object.SetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &treeR{}
			}

			for _, a := range args {
				if a == obj.SetID {
					continue Outer
				}
			}

			args = append(args, obj.SetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sets`),
		qm.WhereIn(`sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Set")
	}

	var resultSlice []*Set
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Set")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sets")
	}

	if len(treeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Set = foreign
		if foreign.R == nil {
			foreign.R = &setR{}
		}
		foreign.R.Trees = append(foreign.R.Trees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SetID == foreign.ID {
				local.R.Set = foreign
				if foreign.R == nil {
					foreign.R = &setR{}
				}
				foreign.R.Trees = append(foreign.R.Trees, local)
				break
			}
		}
	}

	return nil
}

// SetSet of the tree to the related item.
// Sets o.R.Set to related.
// Adds o to related.R.Trees.
func (o *Tree) SetSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Set) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
		strmangle.WhereClause("\"", "\"", 2, treePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Ref, o.Path, o.SetID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SetID = related.ID
	if o.R == nil {
		o.R = &treeR{
			Set: related,
		}
	} else {
		o.R.Set = related
	}

	if related.R == nil {
		related.R = &setR{
			Trees: TreeSlice{o},
		}
	} else {
		related.R.Trees = append(related.R.Trees, o)
	}

	return nil
}

// Trees retrieves all the records using an executor.
func Trees(mods ...qm.QueryMod) treeQuery {
	mods = append(mods, qm.From("\"trees\""))
	return treeQuery{NewQuery(mods...)}
}

// FindTree retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTree(ctx context.Context, exec boil.ContextExecutor, ref []byte, path string, setID int64, selectCols ...string) (*Tree, error) {
	treeObj := &Tree{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trees\" where \"ref\"=$1 AND \"path\"=$2 AND \"set_id\"=$3", sel,
	)

	q := queries.Raw(query, ref, path, setID)

	err := q.Bind(ctx, exec, treeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trees")
	}

	if err = treeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return treeObj, err
	}

	return treeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tree) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trees provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(treeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	treeInsertCacheMut.RLock()
	cache, cached := treeInsertCache[key]
	treeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			treeAllColumns,
			treeColumnsWithDefault,
			treeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(treeType, treeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(treeType, treeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trees\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trees\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trees")
	}

	if !cached {
		treeInsertCacheMut.Lock()
		treeInsertCache[key] = cache
		treeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tree.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tree) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	treeUpdateCacheMut.RLock()
	cache, cached := treeUpdateCache[key]
	treeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			treeAllColumns,
			treePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trees, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trees\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, treePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(treeType, treeMapping, append(wl, treePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trees row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trees")
	}

	if !cached {
		treeUpdateCacheMut.Lock()
		treeUpdateCache[key] = cache
		treeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q treeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trees")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TreeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), treePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, treePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tree slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tree")
	}
	return rowsAff, nil
}

// Delete deletes a single Tree record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tree) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tree provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), treePrimaryKeyMapping)
	sql := "DELETE FROM \"trees\" WHERE \"ref\"=$1 AND \"path\"=$2 AND \"set_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trees")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q treeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no treeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trees")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TreeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(treeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), treePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trees\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, treePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tree slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trees")
	}

	if len(treeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tree) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTree(ctx, exec, o.Ref, o.Path, o.SetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TreeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TreeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), treePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trees\".* FROM \"trees\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, treePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TreeSlice")
	}

	*o = slice

	return nil
}

// TreeExists checks if the Tree row exists.
func TreeExists(ctx context.Context, exec boil.ContextExecutor, ref []byte, path string, setID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trees\" where \"ref\"=$1 AND \"path\"=$2 AND \"set_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ref, path, setID)
	}
	row := exec.QueryRowContext(ctx, sql, ref, path, setID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trees exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tree) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trees provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(treeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	treeUpsertCacheMut.RLock()
	cache, cached := treeUpsertCache[key]
	treeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			treeAllColumns,
			treeColumnsWithDefault,
			treeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			treeAllColumns,
			treePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trees, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(treePrimaryKeyColumns))
			copy(conflict, treePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"trees\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(treeType, treeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(treeType, treeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trees")
	}

	if !cached {
		treeUpsertCacheMut.Lock()
		treeUpsertCache[key] = cache
		treeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
