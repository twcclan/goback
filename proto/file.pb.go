// Code generated by protoc-gen-go.
// source: file.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

// this contains file metadata, which can be different
// accross backups, even if file content is the same
type FileInfo struct {
	Name      string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mode      uint32    `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	User      string    `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Group     string    `protobuf:"bytes,4,opt,name=group" json:"group,omitempty"`
	Timestamp int64     `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Data      *ChunkRef `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto1.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}

func (m *FileInfo) GetData() *ChunkRef {
	if m != nil {
		return m.Data
	}
	return nil
}

// this is based on the file contents
type File struct {
	Sum    []byte      `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
	Size   int64       `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Chunks []*ChunkRef `protobuf:"bytes,3,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto1.CompactTextString(m) }
func (*File) ProtoMessage()    {}

func (m *File) GetChunks() []*ChunkRef {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func init() {
}
