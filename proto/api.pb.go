// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	api.proto
	blob.proto
	commit.proto
	file.proto
	object.proto
	ref.proto
	tree.proto

It has these top-level messages:
	PutResponse
	GetResponse
	DeleteResponse
	ListResponse
	ListRequest
	Blob
	Commit
	FileInfo
	File
	FilePart
	Object
	Ref
	Tree
	TreeNode
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto1.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto1.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListResponse struct {
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto1.RegisterType((*PutResponse)(nil), "proto.PutResponse")
	proto1.RegisterType((*GetResponse)(nil), "proto.GetResponse")
	proto1.RegisterType((*DeleteResponse)(nil), "proto.DeleteResponse")
	proto1.RegisterType((*ListResponse)(nil), "proto.ListResponse")
	proto1.RegisterType((*ListRequest)(nil), "proto.ListRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Store service

type StoreClient interface {
	Put(ctx context.Context, opts ...grpc.CallOption) (Store_PutClient, error)
	Get(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*DeleteResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Store_ListClient, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Put(ctx context.Context, opts ...grpc.CallOption) (Store_PutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Store_serviceDesc.Streams[0], c.cc, "/proto.Store/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &storePutClient{stream}
	return x, nil
}

type Store_PutClient interface {
	Send(*Object) error
	CloseAndRecv() (*PutResponse, error)
	grpc.ClientStream
}

type storePutClient struct {
	grpc.ClientStream
}

func (x *storePutClient) Send(m *Object) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storePutClient) CloseAndRecv() (*PutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) Get(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Delete(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/proto.Store/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Store_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Store_serviceDesc.Streams[1], c.cc, "/proto.Store/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Store_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type storeListClient struct {
	grpc.ClientStream
}

func (x *storeListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Store service

type StoreServer interface {
	Put(Store_PutServer) error
	Get(context.Context, *Ref) (*GetResponse, error)
	Delete(context.Context, *Ref) (*DeleteResponse, error)
	List(*ListRequest, Store_ListServer) error
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).Put(&storePutServer{stream})
}

type Store_PutServer interface {
	SendAndClose(*PutResponse) error
	Recv() (*Object, error)
	grpc.ServerStream
}

type storePutServer struct {
	grpc.ServerStream
}

func (x *storePutServer) SendAndClose(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storePutServer) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StoreServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Store_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StoreServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Store_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServer).List(m, &storeListServer{stream})
}

type Store_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type storeListServer struct {
	grpc.ServerStream
}

func (x *storeListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Store_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Store_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _Store_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _Store_List_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x3c, 0xf9, 0x49, 0x59, 0xa9, 0xc9,
	0x25, 0x10, 0x41, 0x29, 0xce, 0xa2, 0xd4, 0x34, 0x08, 0x53, 0x89, 0x97, 0x8b, 0x3b, 0xa0, 0xb4,
	0x24, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0xc9, 0x84, 0x8b, 0xdb, 0x3d, 0x15, 0xce,
	0x15, 0x52, 0xe5, 0x62, 0x83, 0x68, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0xe2, 0x85, 0xe8,
	0xd2, 0xf3, 0x07, 0x0b, 0x06, 0x41, 0x25, 0x95, 0x04, 0xb8, 0xf8, 0x5c, 0x52, 0x73, 0x52, 0x4b,
	0x52, 0xe1, 0xe6, 0xf0, 0x71, 0xf1, 0xf8, 0x64, 0x16, 0x23, 0xcc, 0x05, 0x5a, 0x03, 0xe1, 0x17,
	0x96, 0xa6, 0x16, 0x97, 0x18, 0x1d, 0x62, 0xe4, 0x62, 0x0d, 0x2e, 0xc9, 0x2f, 0x4a, 0x15, 0xd2,
	0xe1, 0x62, 0x06, 0xda, 0x2f, 0x84, 0x6a, 0xb0, 0x94, 0x10, 0x94, 0x8b, 0xec, 0x34, 0x06, 0x0d,
	0x46, 0x21, 0x75, 0x2e, 0x66, 0xa0, 0xf3, 0x84, 0xb8, 0xa0, 0xd2, 0x41, 0xa9, 0x69, 0x70, 0xa5,
	0x48, 0xce, 0x56, 0x62, 0x10, 0xd2, 0xe5, 0x62, 0x83, 0xb8, 0x08, 0x45, 0xad, 0x28, 0x94, 0x8d,
	0xe6, 0x58, 0x06, 0x21, 0x63, 0x2e, 0x16, 0x90, 0xf3, 0x84, 0x60, 0x86, 0x21, 0xb9, 0x55, 0x4a,
	0x18, 0x45, 0x0c, 0xa6, 0xc5, 0x80, 0x31, 0x89, 0x0d, 0x2c, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x1a, 0xa1, 0x59, 0x5c, 0x6e, 0x01, 0x00, 0x00,
}
